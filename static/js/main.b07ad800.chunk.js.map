{"version":3,"sources":["Hasse_diagram_of_powerset_of_3.svg","Hasse_diagram_of_type_system.svg","../ /lib(/./w+)+/.d/.ts$","snippets/array_type.ts","snippets/boolean_number_bigint_string_symbol.ts","snippets/bottom_type_assignment.ts","snippets/bottom_type_infinity_loop.ts","snippets/bottom_type_throw_error.ts","snippets/class_type.ts","snippets/conditional_types.ts","snippets/contextual_typing.ts","snippets/declaration_spaces.ts","snippets/discriminated_union.ts","snippets/dynamic_typing_any.ts","snippets/function_type.ts","snippets/index_types.ts","snippets/intersection_type.ts","snippets/mapped_types.ts","snippets/object_type.ts","snippets/soundness_and_completeness.ts","snippets/string_literals_and_enum_types.ts","snippets/structural_typing.ts","snippets/top_type.ts","snippets/tuple_type.ts","snippets/type_guards_and_asserts.ts","snippets/type_inference.ts","snippets/type_lattice.ts","snippets/type_literals.ts","snippets/union_type.ts","snippets/unit_type.ts","snippets/variance.ts","snippets/variance_bivariance.ts","snippets/void_type.ts","components/MonacoBox.tsx","snippets/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","ctx","require","MonacoBox","value","style","ref","useRef","useEffect","editor","monaco","create","current","language","fontSize","theme","dispose","height","typescript","typescriptDefaults","setCompilerOptions","target","ScriptTarget","ESNext","allowNonTsExtensions","strict","filename","content","default","forEach","addExtraLib","snippets","array_type","boolean_number_bigint_string_symbol","bottom_type_assignment","bottom_type_infinity_loop","bottom_type_throw_error","class_type","conditional_types","contextual_typing","declaration_spaces","discriminated_union","dynamic_typing_any","function_type","index_types","intersection_type","mapped_types","object_type","soundness_and_completeness","string_literals_and_enum_types","structural_typing","top_type","tuple_type","type_guards_and_asserts","type_inference","type_lattice","type_literals","union_type","unit_type","variance","variance_bivariance","void_type","App","href","about","src","Hasse_diagram_of_powerset_of_3","alt","width","marginLeft","marginRight","Hasse_diagram_of_type_system","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b07ad800.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Hasse_diagram_of_powerset_of_3.4ee60547.svg\";","module.exports = __webpack_public_path__ + \"static/media/Hasse_diagram_of_type_system.641583bd.svg\";","var map = {\n\t\"./lib.dom.d.ts\": 407,\n\t\"./lib.dom.iterable.d.ts\": 408,\n\t\"./lib.es2015.collection.d.ts\": 409,\n\t\"./lib.es2015.core.d.ts\": 410,\n\t\"./lib.es2015.d.ts\": 411,\n\t\"./lib.es2015.generator.d.ts\": 412,\n\t\"./lib.es2015.iterable.d.ts\": 413,\n\t\"./lib.es2015.promise.d.ts\": 414,\n\t\"./lib.es2015.proxy.d.ts\": 415,\n\t\"./lib.es2015.reflect.d.ts\": 416,\n\t\"./lib.es2015.symbol.d.ts\": 417,\n\t\"./lib.es2015.symbol.wellknown.d.ts\": 418,\n\t\"./lib.es2016.array.include.d.ts\": 419,\n\t\"./lib.es2016.d.ts\": 420,\n\t\"./lib.es2016.full.d.ts\": 421,\n\t\"./lib.es2017.d.ts\": 422,\n\t\"./lib.es2017.full.d.ts\": 423,\n\t\"./lib.es2017.intl.d.ts\": 424,\n\t\"./lib.es2017.object.d.ts\": 425,\n\t\"./lib.es2017.sharedmemory.d.ts\": 426,\n\t\"./lib.es2017.string.d.ts\": 427,\n\t\"./lib.es2017.typedarrays.d.ts\": 428,\n\t\"./lib.es2018.asyncgenerator.d.ts\": 429,\n\t\"./lib.es2018.asynciterable.d.ts\": 430,\n\t\"./lib.es2018.d.ts\": 431,\n\t\"./lib.es2018.full.d.ts\": 432,\n\t\"./lib.es2018.intl.d.ts\": 433,\n\t\"./lib.es2018.promise.d.ts\": 434,\n\t\"./lib.es2018.regexp.d.ts\": 435,\n\t\"./lib.es2019.array.d.ts\": 436,\n\t\"./lib.es2019.d.ts\": 437,\n\t\"./lib.es2019.full.d.ts\": 438,\n\t\"./lib.es2019.object.d.ts\": 439,\n\t\"./lib.es2019.string.d.ts\": 440,\n\t\"./lib.es2019.symbol.d.ts\": 441,\n\t\"./lib.es2020.bigint.d.ts\": 442,\n\t\"./lib.es2020.d.ts\": 443,\n\t\"./lib.es2020.full.d.ts\": 444,\n\t\"./lib.es2020.intl.d.ts\": 445,\n\t\"./lib.es2020.promise.d.ts\": 446,\n\t\"./lib.es2020.string.d.ts\": 447,\n\t\"./lib.es2020.symbol.wellknown.d.ts\": 448,\n\t\"./lib.es5.d.ts\": 449,\n\t\"./lib.es6.d.ts\": 450,\n\t\"./lib.esnext.d.ts\": 451,\n\t\"./lib.esnext.full.d.ts\": 452,\n\t\"./lib.esnext.intl.d.ts\": 453,\n\t\"./lib.esnext.promise.d.ts\": 454,\n\t\"./lib.esnext.string.d.ts\": 455,\n\t\"./lib.scripthost.d.ts\": 456,\n\t\"./lib.webworker.d.ts\": 457,\n\t\"./lib.webworker.importscripts.d.ts\": 458\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 406;","export default \"const array_type_demo0: number[] = [1, 2, 3];\\nconst array_type_demo1: Array<number> = [1, 2, 3];\\n\\nconst array_type_demo2: ReadonlyArray<number> = [1, 2, 3];\\nconst array_type_demo3: readonly number[] = [1, 2, 3];\\n\\nconst array_type_demo0_length = array_type_demo0.length;\\n\\ntype array_type_length = Array<string>['length'];\\n\";","export default \"const falseValue = false;\\nlet booleanValue = true;\\n\\nlet trueValue = true as const;\\n\\nconst numberValue255 = 0xff;\\nconst bigintValue = -0b10;\\n\\nlet numberValue = 255;\\n\\nconst stringHelloWorld = 'Hello World';\\n\\nconst symbolValue = Symbol.for('Hello Symbol');\\n\\nlet symbolValue2 = Symbol.for('Hello Symbol');\\n\";","export default \"declare let bottom: never;\\n\\nconst bottom_type_is_assignable_to_type_number: number = bottom;\\nconst bottom_type_is_assignable_to_type_string: string = bottom;\\nconst bottom_type_is_assignable_to_type_object: object = bottom;\\nconst bottom_type_is_assignable_to_type_function: Function = bottom;\\nconst bottom_type_is_assignable_to_bottom_type: never = bottom;\\n\\n// @ts-expect-error\\nbottom = 1;\\n// @ts-expect-error\\nbottom = '';\\n// @ts-expect-error\\nbottom = {};\\n\";","export default \"function infinity_loop(): never {\\n  // type system 一般是 incomplete 的\\n  // while (1 === 1) {}\\n  while (true) {}\\n  console.log('Unreachable code detected.');\\n}\\n\\ninfinity_loop();\\nconsole.log('Unreachable code detected.');\\n\";","export default \"function throw_error(): never {\\n  throw new Error('');\\n  console.log('Unreachable code detected.');\\n}\\n\\nthrow_error();\\nconsole.log('Unreachable code detected.');\\n\";","export default \"interface ClassTypeDemo1Interface {\\n  bar(): string;\\n}\\n\\nclass ClassTypeDemo1 implements ClassTypeDemo1Interface {\\n  baz;\\n\\n  tux?: Object;\\n  constructor(\\n    private readonly foo: number,\\n    bar: { v: readonly [number, { readonly x: string }] },\\n  ) {\\n    this.baz = bar.v;\\n  }\\n\\n  bar() {\\n    return '';\\n  }\\n}\\n\";","export default \"type PromiseType<T extends Promise<unknown>> = T extends Promise<infer R>\\n  ? R\\n  : 'any_type_here_is_ok';\\n\\ntype PromiseTypeDemo = PromiseType<Promise<[number, string]>>;\\n\\nnamespace arithmetic {\\n  type Equal<A, B> = [A] extends [B] ? ([B] extends [A] ? true : false) : false;\\n\\n  type Nat = Array<undefined>;\\n  type Zero = [];\\n  type Succ<T extends Nat> = [undefined, ...T];\\n\\n  // prettier-ignore\\n  type Prev<T extends Nat> = T extends [undefined, ...infer p] ? p : Zero;\\n\\n  type Plus<A extends Nat, B extends Nat> = A extends Zero\\n    ? B\\n    : Plus<Prev<A>, Succ<B>>;\\n\\n  type Plus_v2<A, B> = A extends Nat\\n    ? B extends Nat\\n      ? Plus<A, B>\\n      : never\\n    : never;\\n\\n  type NatToNumber<T extends Nat> = T['length'];\\n\\n  type NumberToNatHelper<T extends number, N extends Nat> = true extends Equal<\\n    N['length'],\\n    T\\n  >\\n    ? N\\n    : NumberToNatHelper<T, Succ<N>>;\\n\\n  type NumberToNat<T extends number> = NumberToNatHelper<T, Zero>;\\n\\n  // @ts-expect-error Type instantiation is excessively deep and possibly infinite.\\n  export type add<a extends number, b extends number> = NatToNumber<\\n    // @ts-expect-error\\n    Plus_v2<NumberToNat<a>, NumberToNat<b>>\\n  >;\\n}\\n\\ntype eleven = arithmetic.add<6, 5>;\\n\\nfunction add<A extends number, B extends number>(\\n  a: A,\\n  b: B,\\n): A extends number\\n  ? B extends number\\n    ? arithmetic.add<A, B>\\n    : never\\n  : never {\\n  return (a + b) as any;\\n}\\n\\ndeclare const value123: 1 | 2 | 3;\\ndeclare const value134: 1 | 3 | 4;\\n\\nconst valueAdded = add(value123, value134);\\n\";","export default \"[1, 2, 3].map(x => x + 1);\\n\";","export default \"const X: string = ''; // Value named X\\n\\ntype X = { y: number }; // Type named X\\n\\nnamespace X {\\n  // Namespace named X\\n  export type Y = string;\\n}\\nconst n: X = { y: 1 }; // X references type\\nconst s: X.Y = X; // First X references namespace, second X references value\\nconst r: X['y'] = 2; // X references type\\n\\n/**\\n * Value and type named C\\n */\\nclass C {\\n  // Instance and static members in a class are in separate declaration spaces\\n  x?: string; // Instance member\\n  static x: string = '123'; // Static member\\n}\\n\\n// typeof C\\nconst C2 = C;\\n\\nconst C3: { new (): C } = C;\\n\\nconst C4: new () => C = C;\\n\";","export default \"enum Status {\\n  OK,\\n  Error,\\n}\\n\\ntype Result<V, E> =\\n  | {\\n      status: Status.OK;\\n      value: V;\\n    }\\n  | {\\n      status: Status.Error;\\n      error: E;\\n    };\\n\\ndeclare const a: Result<string, number>;\\n\\nfunction exhaustiveCheck(v: never) {}\\n\\nif (a.status === Status.OK) {\\n  a.value;\\n} else if (a.status === Status.Error) {\\n  a.error;\\n} else {\\n  exhaustiveCheck(a);\\n}\\n\";","export default \"const any_type_is_assignable_to_type_any: any = 1;\\nconst type_any_is_assignable_to_any_type_such_as_string: string = any_type_is_assignable_to_type_any;\\n\";","export default \"async function asyncFunctionReturn1() {\\n  return 1;\\n}\\n\\nconst add_v1: (a: number) => (b: number) => number = (\\n  a: number,\\n): ((b: number) => number) => (b: number): number => a + b;\\n\\nconst add_v2 = (a: number) => (b: number) => a + b;\\n\\nconst sum_of_all = (...xs: ReadonlyArray<number>) =>\\n  xs.reduce((a, b) => a + b, 0);\\n\\nfunction add_v3(a: number, b: number): number;\\nfunction add_v3(a: bigint, b: bigint): bigint;\\nfunction add_v3(a: number | bigint, b: number | bigint) {\\n  // 实现往往类型不安全\\n  // @ts-expect-error\\n  return a + b;\\n}\\n\\n// prettier-ignore\\nconst add_v4:\\n  & ((a: number, b: number) => number)\\n  & ((a: bigint, b: bigint) => bigint)\\n  = add_v3;\\n\\nfunction identity<T>(x: T) {\\n  return x;\\n}\\n\\nconst identityOf1 = identity(1);\\n\\nfunction map<X, Y>(xs: ReadonlyArray<X>, mapper: (x: X) => Y) {\\n  return xs.map(mapper);\\n}\\n\";","export default \"function pluck<T, K extends keyof T>(o: T, propertyNames: K[]): T[K][] {\\n  return propertyNames.map(n => o[n]);\\n}\\n\\ninterface Car {\\n  manufacturer: string;\\n  model: string;\\n  year: number;\\n}\\nlet taxi: Car = {\\n  manufacturer: 'Toyota',\\n  model: 'Camry',\\n  year: 2014,\\n};\\n\\n// Manufacturer and model are both of type string,\\n// so we can pluck them both into a typed string array\\nlet makeAndModel: string[] = pluck(taxi, ['manufacturer', 'model']);\\n\\n// If we try to pluck model and year, we get an\\n// array of a union type: (string | number)[]\\nlet modelYear = pluck(taxi, ['model', 'year']);\\n\\nfunction getProperty<T, K extends keyof T>(o: T, propertyName: K): T[K] {\\n  return o[propertyName]; // o[propertyName] is of type T[K]\\n}\\n\\nlet nameOfTaxi: string = getProperty(taxi, 'manufacturer');\\nlet year: number = getProperty(taxi, 'year');\\n\\n// @ts-expect-error 'unknown' is not in 'manufacturer' | 'model' | 'year'\\nlet unknown = getProperty(taxi, 'unknown');\\n\";","export default \"type Loggable = {\\n  log(name: string): void;\\n};\\ntype HasName = {\\n  readonly name: string;\\n};\\n\\ntype HasNameAndLoggable = Loggable & HasName;\\n\\n// prettier-ignore\\ntype IntersectionsReducedByDiscriminantProperties =\\n  & { kind: 'foo' }\\n  & { kind: 'bar' };\\n\";","export default \"interface Person {\\n  name: string;\\n  age: number;\\n}\\n\\ntype MyReadonly<T> = {\\n  readonly [P in keyof T]: T[P];\\n};\\ntype MyPartial<T> = {\\n  [P in keyof T]?: T[P];\\n};\\n\\ntype PersonPartial = MyPartial<Person>;\\ntype ReadonlyPerson = MyReadonly<Person>;\\n\";","export default \"const object_type_demo_1: object = {};\\nconst object_type_demo_2: object = [];\\n// @ts-expect-error\\nconst object_type_demo_3: object = 1;\\n// @ts-expect-error\\nconst object_type_demo_3: object = undefined;\\n\";","export default \"function incomplete_demo_1() {\\n  let a: number;\\n  [1].forEach(() => {\\n    a = 1;\\n  });\\n  // @ts-expect-error\\n  console.log(1 + a);\\n}\\n\\nfunction unsound_demo_1() {\\n  let a: number;\\n  [].forEach(() => {\\n    a = 1;\\n  });\\n  const run = () => {\\n    console.log(a + 1);\\n  };\\n  run();\\n}\\n\\nfunction unsound_demo_2(arr: Array<string>) {\\n  const itShouldBeStringOrUndefined = arr[10];\\n  console.log(itShouldBeStringOrUndefined.toLowerCase());\\n  console.log(arr[-1].length);\\n}\\n\\nfunction unsound_demo_3() {\\n  const subTypeArray: Array<{ x: string; y: { z: string } }> = [];\\n  const superTypeArray: Array<{ x: string }> = subTypeArray;\\n  superTypeArray.unshift({ x: '123' });\\n  console.log(subTypeArray[0].y.z);\\n}\\n\\nconst sleep = (ms: number) =>\\n  new Promise(resolve => {\\n    setTimeout(resolve, ms);\\n  });\\n\\nclass unsound_demo_4 {\\n  public foo?: string;\\n\\n  async run() {\\n    if (this.foo === undefined) {\\n      return;\\n    }\\n    await sleep(1000);\\n    console.log(`foo is ${this.foo} and length is ${this.foo.length}`);\\n  }\\n}\\n\\nasync function unsound_demo_5(bar: { baz: number | string }) {\\n  if (typeof bar.baz === 'number') {\\n    await sleep(1000);\\n    console.log(bar.baz.toFixed());\\n  }\\n}\\n\";","export default \"enum Gender {\\n  male = 'male',\\n  female = 'female',\\n}\\n\\nconst enum Gender2 {\\n  male = 'male',\\n  female = 'female',\\n}\\n\\ntype gender = 'male' | 'female';\\n\";","export default \"interface Named {\\n  name: string;\\n}\\n\\nclass Person {\\n  name: string = '';\\n}\\n\\nlet p: Named;\\n// OK, because of structural typing\\np = new Person();\\n\";","export default \"declare let top_value: unknown;\\n\\n// @ts-expect-error\\nconst top_type_is_assignable_to_type_number: number = top_value;\\n// @ts-expect-error\\nconst top_type_is_assignable_to_type_string: string = top_value;\\n// @ts-expect-error\\nconst top_type_is_assignable_to_type_object: object = top_value;\\n// @ts-expect-error\\nconst top_type_is_assignable_to_type_function: Function = top_value;\\n// @ts-expect-error\\nconst top_type_is_assignable_to_bottom_type: never = top_value;\\n\\ntop_value = 1;\\ntop_value = '';\\ntop_value = {};\\n\";","export default \"type TupleTypeDemo = readonly [name: string, age?: number];\\n\\nconst xianbei: TupleTypeDemo = ['田所浩二', 24];\\n\\ntype TupleTypeDemo2 = [string, number?];\\n\\nconst jiege: TupleTypeDemo2 = ['杰哥'];\\njiege[1] = 114514;\\n\\nconst the_answer = ['the answer to life the universe and everything', 'is', 42] as const;\\n\\nconst jiege_length = jiege.length\\n\\ntype TupleTypeDemo_length = TupleTypeDemo['length']\\n\";","export default \"function isNotNil<T>(x: T): x is NonNullable<T> {\\n  return x != null;\\n}\\n\\nconst type_guard_demo_1 = [1, 2, '', undefined, null].filter(isNotNil);\\n\\nfunction type_guard_demo_2(x?: string) {\\n  return typeof x === 'string' ? x.length : -1;\\n}\\n\\nfunction assertNotNil<T>(x: T): asserts x is NonNullable<T> {\\n  if (x == null) {\\n    throw new Error();\\n  }\\n}\\n\\nfunction asserts_demo_1(x?: string) {\\n  assertNotNil(x);\\n  return x.length;\\n}\\n\\nfunction assert(x: unknown): asserts x {\\n  if (!x) {\\n    throw new Error();\\n  }\\n}\\n\\nfunction asserts_demo_2(x?: Array<number>) {\\n  assert(x instanceof Array);\\n  return x.length;\\n}\\n\";","export default \"// @ts-expect-error 'quick_sort' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.\\nfunction quick_sort(xs: ReadonlyArray<number>) {\\n  if (xs.length === 0) {\\n    return xs;\\n  }\\n  const [head, ...tail] = xs;\\n  return [\\n    ...quick_sort(tail.filter(x => x < head)),\\n    head,\\n    ...quick_sort(tail.filter(x => x >= head)),\\n  ];\\n}\\n\\nconst filter = <X>(predicate: (value: X) => boolean) => (\\n  xs: ReadonlyArray<X>,\\n) => xs.filter(predicate);\\n\\n// @ts-expect-error\\nconst numbers: number[] = filter(x => x !== 1)([1, 2, 3, 4]);\\n\";","export default \"type Equal<T, U> = [T] extends [U] ? ([U] extends [T] ? true : false) : false;\\n\\ntype a = {\\n  foo: number;\\n  bar: string;\\n};\\n\\ntype b = {\\n  bar: string;\\n  baz: boolean;\\n};\\n\\ntype c = {\\n  foo: number;\\n  baz: boolean;\\n};\\n\\n// 子类型关系是一个类型上的非严格偏序关系，存在二元运算 union 和 intersection 满足三个公理\\n// 三个公理恒等式， for all a, b, c ∈ Type，\\n// 交换律\\ntype CommutativeLaw1 = Equal<a | b, b | a>;\\ntype CommutativeLaw2 = Equal<a & b, b & a>;\\n// 结合律\\ntype AssociativeLaw1 = Equal<a | (b | c), (a | b) | c>;\\ntype AssociativeLaw2 = Equal<a & (b & c), (a & b) & c>;\\n// 吸收律\\ntype AbsorptionLaw1 = Equal<a | (a & b), a>;\\ntype AbsorptionLaw2 = Equal<a & (a | b), a>;\\n\\n// 可以推出 幂等律\\ntype IdempotentLaw1 = Equal<a, a | a>;\\ntype IdempotentLaw2 = Equal<a, a & a>;\\n\\n// 而且存在 ⊤ 和 ⊥\\ntype neverIsTheBottomType = never extends a ? true : false;\\ntype unknownIsTheTopType = a extends unknown ? true : false;\\n// 或者可以定义恒等律\\ntype IdentityLaw1 = Equal<a & unknown, a>;\\ntype IdentityLaw2 = Equal<a | never, a>;\\n\\n// （Type, union, intersection, never, unknown）构成一个 bounded lattice\\n\";","export default \"type Handler = Function;\\nconst key = 'key';\\n\\ntype Foo = {\\n  baz: [\\n    1,\\n    number,\\n    {\\n      y: Array<string>;\\n    },\\n  ];\\n  readonly handler: Handler;\\n  toString(): string;\\n  readonly [Symbol.iterator]: '123';\\n  [key]: 2333;\\n  0x1: 'foo';\\n  bar: number;\\n};\\n\";","export default \"type NumberType = number | number;\\ntype NumberOrString = NumberType | string;\\nconst numberOrStringArray: Array<NumberOrString> = [1, '2333'];\\n\";","export default \"const undef = undefined;\\nconst nil = null;\\n\\nlet null_in_let_infer_any = null;\\nlet undefined_in_let_infer_any = undefined;\\n\\n// @ts-expect-error\\nconst undefined_is_not_null: undefined = null;\\n\\n// @ts-expect-error\\nconst null_is_not_undefined: null = undefined;\\n\\n// @ts-expect-error\\nconst undefined_is_not_number: number = undefined;\\n\";","export default \"type is_a_supertype_of<a, b> = [b] extends [a] ? true : false;\\n\\ndeclare let value_of_supertype: number;\\ndeclare let value_of_subtype: 1;\\nvalue_of_supertype = value_of_subtype; // OK\\n// @ts-expect-error Type 'number' is not assignable to type '1'.\\nvalue_of_subtype = value_of_supertype;\\n\\ntype variance_test = is_a_supertype_of<number, 1>;\\n\\n/*\\n * contravariant\\n */\\n\\ndeclare let parameter_is_supertype: (a: number) => void;\\ndeclare let parameter_is_subtype: (a: 1) => void;\\n\\n// @ts-expect-error Type 'number' is not assignable to type '1'.\\nparameter_is_supertype = parameter_is_subtype;\\nparameter_is_subtype = parameter_is_supertype; // OK\\n\\ntype contravariant_test = is_a_supertype_of<\\n  (a: 1) => void,\\n  (a: number) => void\\n>;\\n\\n/*\\n * covariant\\n */\\ndeclare let return_is_supertype: () => number;\\ndeclare let return_is_subtype: () => 1;\\n\\nreturn_is_supertype = return_is_subtype; // OK\\n// @ts-expect-error Type 'number' is not assignable to type '1'.\\nreturn_is_subtype = return_is_supertype;\\n\\ntype covariant_test = is_a_supertype_of<() => number, () => 1>;\\n\\n/*\\n * invariant\\n */\\n\\ndeclare let parameter_and_return_is_supertype: (a: number) => number;\\ndeclare let parameter_and_return_is_subtype: (a: 1) => 1;\\n\\n// @ts-expect-error Type 'number' is not assignable to type '1'.\\nparameter_and_return_is_supertype = parameter_and_return_is_subtype;\\n// @ts-expect-error Type 'number' is not assignable to type '1'.\\nparameter_and_return_is_subtype = parameter_and_return_is_supertype;\\n\\n// false\\ntype invariant_test_1 = is_a_supertype_of<(a: number) => number, (a: 1) => 1>;\\n// false\\ntype invariant_test_2 = is_a_supertype_of<(a: 1) => 1, (a: number) => number>;\\n\";","export default \"const variance_test_value = [{ x: 114 }, { y: { z: 514 } }] as const;\\n\\nlet func_parameter_is_supertype: (a: number) => void;\\n\\nconst func_parameter_is_subtype: (a: 1) => void = a => {\\n  console.log(variance_test_value[a].y.z);\\n};\\n\\n// @ts-expect-error Type 'number' is not assignable to type '1'.\\nfunc_parameter_is_supertype = func_parameter_is_subtype;\\n\\nfunc_parameter_is_supertype(0); // Uncaught TypeError: Cannot read property 'z' of undefined\\n\";","export default \"function noop() {}\\n\\nconst type_undefined_is_assignable_to_type_void: void = undefined;\\n\\n// @ts-expect-error\\nconst type_number_is_not_assignable_to_type_void: void = 1;\\n\";","import * as React from 'react';\nimport { useRef, useEffect, CSSProperties } from 'react';\nimport * as monaco from 'monaco-editor';\n\n// This require context needs typescript as a dev dependency\n// Note this will add all of those files to your build even if you don't use them\nconst ctx = require.context(\n  '!!raw-loader!typescript/lib',\n  true,\n  /lib(\\.\\w+)+\\.d\\.ts$/, // lib.**.d.ts\n);\n\nmonaco.languages.typescript.typescriptDefaults.setCompilerOptions({\n  target: monaco.languages.typescript.ScriptTarget.ESNext,\n  allowNonTsExtensions: true,\n  strict: true,\n});\n\nctx\n  .keys()\n  .map(filename => ({\n    filename,\n    content: ctx(filename).default,\n  }))\n  .forEach(({ filename, content }) => {\n    monaco.languages.typescript.typescriptDefaults.addExtraLib(\n      content,\n      filename,\n    );\n  });\n\ntype MonacoBoxProps = {\n  readonly value: string;\n  readonly style?: CSSProperties;\n};\n\nexport default function MonacoBox({ value, style }: MonacoBoxProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    const editor = monaco.editor.create(ref.current!, {\n      value,\n      language: 'typescript',\n      fontSize: 24,\n      theme: 'vs-dark',\n    });\n\n    return () => editor.dispose();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return <div ref={ref} style={{ height: '70vh', ...style }} />;\n}\n","const snippets = {\n  array_type: require(\"!!raw-loader!./array_type.ts\").default as string,\n  boolean_number_bigint_string_symbol: require(\"!!raw-loader!./boolean_number_bigint_string_symbol.ts\")\n    .default as string,\n  bottom_type_assignment: require(\"!!raw-loader!./bottom_type_assignment.ts\")\n    .default as string,\n  bottom_type_infinity_loop: require(\"!!raw-loader!./bottom_type_infinity_loop.ts\")\n    .default as string,\n  bottom_type_throw_error: require(\"!!raw-loader!./bottom_type_throw_error.ts\")\n    .default as string,\n  class_type: require(\"!!raw-loader!./class_type.ts\").default as string,\n  conditional_types: require(\"!!raw-loader!./conditional_types.ts\")\n    .default as string,\n  contextual_typing: require(\"!!raw-loader!./contextual_typing.ts\")\n    .default as string,\n  declaration_spaces: require(\"!!raw-loader!./declaration_spaces.ts\")\n    .default as string,\n  discriminated_union: require(\"!!raw-loader!./discriminated_union.ts\")\n    .default as string,\n  dynamic_typing_any: require(\"!!raw-loader!./dynamic_typing_any.ts\")\n    .default as string,\n  function_type: require(\"!!raw-loader!./function_type.ts\").default as string,\n  index_types: require(\"!!raw-loader!./index_types.ts\").default as string,\n  intersection_type: require(\"!!raw-loader!./intersection_type.ts\")\n    .default as string,\n  mapped_types: require(\"!!raw-loader!./mapped_types.ts\").default as string,\n  object_type: require(\"!!raw-loader!./object_type.ts\").default as string,\n  soundness_and_completeness: require(\"!!raw-loader!./soundness_and_completeness.ts\")\n    .default as string,\n  string_literals_and_enum_types: require(\"!!raw-loader!./string_literals_and_enum_types.ts\")\n    .default as string,\n  structural_typing: require(\"!!raw-loader!./structural_typing.ts\")\n    .default as string,\n  top_type: require(\"!!raw-loader!./top_type.ts\").default as string,\n  tuple_type: require(\"!!raw-loader!./tuple_type.ts\").default as string,\n  type_guards_and_asserts: require(\"!!raw-loader!./type_guards_and_asserts.ts\")\n    .default as string,\n  type_inference: require(\"!!raw-loader!./type_inference.ts\").default as string,\n  type_lattice: require(\"!!raw-loader!./type_lattice.ts\").default as string,\n  type_literals: require(\"!!raw-loader!./type_literals.ts\").default as string,\n  union_type: require(\"!!raw-loader!./union_type.ts\").default as string,\n  unit_type: require(\"!!raw-loader!./unit_type.ts\").default as string,\n  variance: require(\"!!raw-loader!./variance.ts\").default as string,\n  variance_bivariance: require(\"!!raw-loader!./variance_bivariance.ts\")\n    .default as string,\n  void_type: require(\"!!raw-loader!./void_type.ts\").default as string,\n} as const;\n\nexport default snippets;\n","/* eslint-disable import/no-webpack-loader-syntax */\n\nimport * as React from 'react';\nimport {\n  Deck,\n  Slide,\n  Heading,\n  Markdown,\n  Text,\n  UnorderedList,\n  ListItem,\n} from 'spectacle';\nimport MonacoBox from './components/MonacoBox';\nimport snippets from './snippets';\nimport Hasse_diagram_of_powerset_of_3 from './Hasse_diagram_of_powerset_of_3.svg';\nimport Hasse_diagram_of_type_system from './Hasse_diagram_of_type_system.svg';\n\nfunction App() {\n  return (\n    <Deck>\n      <Slide>\n        <Heading>TypeScript 101</Heading>\n        <Markdown>### ZHAO Jinxiang</Markdown>\n      </Slide>\n      <Slide>\n        <Heading>Welcome to TypeScript</Heading>\n\n        <Markdown>\n          {\n            /* md */ `\nTOC\n\n* 类型入门介绍和工具配置\n* 基本类型\n* 组合类型，type constructor，variance，type lattice\n* advanced types\n          `\n          }\n        </Markdown>\n      </Slide>\n\n      <Slide>\n        <Markdown>{\n          /* md */ `\n类型系统是这样一个东西：\n\n* 在有些人眼里它很复杂，处处给自己添麻烦，碍手碍脚。\n* 另外一些人运用它概述和限制一个系统，使得编程变成这样一种活动\n   1. 从全局思考新的系统约束，或约束更改应该是什么\n   2. 从全局思考如何引入新的信息和让信息怎样流动可以满足1所提出的新约束\n   3. 根据1和2 调整类型定义\n   4. 根据编译器的错误提示更改代码\n`\n        }</Markdown>\n      </Slide>\n      <Slide>\n        <Slide>\n          <Markdown>{\n            /* md */ `\n这个过程看起来很复杂，其实基本上就是思考10%的时间，然后90%的时间一边看电视或者电影，一边无脑改程序的过程，改完了都不知道自己改了啥。然后一跑test全过。\n这种开发方式又叫做careless driven programming，即：即使三心二意，也可以写出正确的程序，且保持系统可以三心二意的更改的属性。这里的重中之重，是要maintain系统的“三心二意”性。\n\nby 阿萊克西斯\n`\n          }</Markdown>\n        </Slide>\n        <Heading>Introduction to typing</Heading>\n        <UnorderedList>\n          <ListItem>基本术语</ListItem>\n          <ListItem>\n            常见的类型系统\n            <UnorderedList>\n              <ListItem>Dynamic typing / Static typing</ListItem>\n              <ListItem>Nominal typing / Structural typing</ListItem>\n              <ListItem>Gradual typing</ListItem>\n            </UnorderedList>\n          </ListItem>\n        </UnorderedList>\n      </Slide>\n\n      <Slide>\n        <div>\n          <Markdown>\n            {\n              /* md */ `\n基本术语\n\n* term: 项，一个表达式\n* type: 一个有相同性质的 term 的集合\n* typing context/environment 定型环境: Map<[变量名,类型]>\n* typing: 在某个 context 中赋予某个 term 以某个 type\n* typed: term 被标上 type 啦\n* typing rule: 已知 typing environment 中的某些 term 的类型，推出新的某些 term 的 type 的规则\n* type checking: 确认 term 是否能在 context 中标记成 type\n`\n            }\n          </Markdown>\n        </div>\n      </Slide>\n\n      <Slide>\n        <Text>常见的类型系统</Text>\n        <UnorderedList>\n          <ListItem>Dynamic typing / Static typing</ListItem>\n          <ListItem>Nominal typing / Structural typing</ListItem>\n          <ListItem>Gradual typing</ListItem>\n        </UnorderedList>\n      </Slide>\n\n      <Slide>\n        <Heading>环境配置</Heading>\n        <UnorderedList>\n          <ListItem>node</ListItem>\n          <ListItem>vscode</ListItem>\n          <ListItem>ts-node</ListItem>\n        </UnorderedList>\n      </Slide>\n\n      <Slide>\n        <Heading>Basic Types</Heading>\n      </Slide>\n      <Slide>\n        <Text>undefined / null</Text>\n        <MonacoBox value={snippets.unit_type} />\n      </Slide>\n      <Slide>\n        <Text>boolean / number / bigint / string / symbol</Text>\n        <MonacoBox value={snippets.boolean_number_bigint_string_symbol} />\n      </Slide>\n      <Slide>\n        <Text>void</Text>\n        <Text>\n          void 是一个非常复杂的类型，在某些情况下等价于 any，大部分情况下类似于\n          undefined 的别名\n        </Text>\n        <MonacoBox value={snippets.void_type} />\n      </Slide>\n      <Slide>\n        <Text>bottom type / never / 0</Text>\n        <Text>\n          类型论中底类型(常常被记为up tack (⊥) symbol)，在 ts 中对应的是\n          never，这个 type 只有 0 个实际的\n          instance，多用于表示死循环或者抛错停机\n        </Text>\n      </Slide>\n      <Slide>\n        <Text>bottom type: infinity loop</Text>\n        <MonacoBox value={snippets.bottom_type_infinity_loop} />\n      </Slide>\n      <Slide>\n        <Text>bottom type: throw error</Text>\n        <MonacoBox value={snippets.bottom_type_throw_error} />\n      </Slide>\n      <Slide>\n        <Text>bottom type: bottom type assignment</Text>\n        <MonacoBox value={snippets.bottom_type_assignment} />\n      </Slide>\n      <Slide>\n        <Text>top type</Text>\n        <Text>\n          类型论中的顶类型（常被记为down tack symbol (⊤)），在 ts 中是\n          unknown，任何类型都是其子类型\n        </Text>\n        <MonacoBox value={snippets.top_type} />\n      </Slide>\n      <Slide>\n        <Text>any</Text>\n        <Text>动态类型，不安全的类型，危险的功能，可以不禁止，但得慎用</Text>\n        <MonacoBox value={snippets.dynamic_typing_any} />\n      </Slide>\n      <Slide>\n        <Slide>\n          <Heading>Composing Types</Heading>\n          <Text>{'type -> type'}</Text>\n          <Text>接下来的内容都是组合上面的类型，主要介绍各种类型构造器</Text>\n        </Slide>\n      </Slide>\n      <Slide>\n        <Text>Tuple type</Text>\n        <Text>\n          tuple 是最常见的类型构造器，js 中没有 tuple，由 array\n          来模拟，比如二元组就是一个 {'(type,type)->type'}\n          的类型构造器，常常用于有限长度的数据表示\n        </Text>\n        <MonacoBox value={snippets.tuple_type} />\n      </Slide>\n\n      <Slide>\n        <Text>Array type</Text>\n        <Text>\n          Array 是一个一元类型构造器 {'type->type'}，接受一个类型\n          T，返回一个新类型 {'Array<T>'}\n        </Text>\n        <MonacoBox value={snippets.array_type} />\n      </Slide>\n      <Slide>\n        <Markdown>{\n          /* md */ `\nTuple or Array?\n\n* length\n* Number of type parameters\n`\n        }</Markdown>\n      </Slide>\n      <Slide>\n        <Text>Type literal / object literal type</Text>\n        <MonacoBox value={snippets.type_literals} />\n      </Slide>\n\n      <Slide>\n        <Text>Intersection type</Text>\n        <Text>\n          an intersection type {'σ & τ'} can be allocated to values that can be\n          assigned both the type σ and the type τ.\n        </Text>\n        <MonacoBox value={snippets.intersection_type} />\n      </Slide>\n\n      <Slide>\n        <Text>Union type</Text>\n        <Text>\n          A union type describes a value that can be one of several types.\n        </Text>\n        <MonacoBox value={snippets.union_type} />\n      </Slide>\n\n      <Slide>\n        <Text>Lattice</Text>\n        <Text>\n          <a\n            href=\"https://en.wikipedia.org/wiki/Lattice_(order)#Bounded_lattice\"\n            about=\"_blank\"\n          >\n            Bounded lattice\n          </a>\n        </Text>\n        <img\n          src={Hasse_diagram_of_powerset_of_3}\n          alt=\"Hasse diagram of powerset of 3\"\n        />\n      </Slide>\n      <Slide>\n        <Text>Type lattice</Text>\n        <img\n          style={{\n            width: 631,\n            height: 502,\n            marginLeft: 'auto',\n            marginRight: 'auto',\n          }}\n          src={Hasse_diagram_of_type_system}\n          alt=\"Hasse diagram of type system\"\n        />\n      </Slide>\n\n      <Slide>\n        <Text>Type lattice</Text>\n        <MonacoBox value={snippets.type_lattice} />\n      </Slide>\n      <Slide>\n        <Text>string literals and enum type</Text>\n        <Text>enum is nominal typing.</Text>\n        <MonacoBox value={snippets.string_literals_and_enum_types} />\n      </Slide>\n\n      <Slide>\n        <Text>variance : covariant / contravariant / invariant</Text>\n        <MonacoBox value={snippets.variance} />\n      </Slide>\n      <Slide>\n        <Text>bivariance</Text>\n        <MonacoBox value={snippets.variance_bivariance} />\n      </Slide>\n\n      <Slide>\n        <Text>discriminated union</Text>\n        <MonacoBox value={snippets.discriminated_union} />\n      </Slide>\n      <Slide>\n        <Text>function</Text>\n        <MonacoBox value={snippets.function_type} />\n      </Slide>\n      <Slide>\n        <Text>index types</Text>\n        <MonacoBox value={snippets.index_types} />\n      </Slide>\n      <Slide>\n        <Text>mapped types</Text>\n        <MonacoBox value={snippets.mapped_types} />\n      </Slide>\n      <Slide>\n        <Text>contextual typing</Text>\n        <MonacoBox value={snippets.contextual_typing} />\n      </Slide>\n      <Slide>\n        <Text>class</Text>\n        <MonacoBox value={snippets.class_type} />\n      </Slide>\n      <Slide>\n        <Text>conditional types</Text>\n        <MonacoBox value={snippets.conditional_types} />\n      </Slide>\n      <Slide>\n        <Text>type guards and asserts</Text>\n        <MonacoBox value={snippets.type_guards_and_asserts} />\n      </Slide>\n      <Slide>\n        <Text>Nominal typing and structural typing</Text>\n        <Text>\n          A static type checker uses either the names or the structure of the\n          types in order to compare them against other types. Checking against\n          the name is nominal typing and checking against the structure is\n          structural typing.\n        </Text>\n      </Slide>\n      <Slide>\n        <Text>\n          Structural typing is a way of relating types based solely on their\n          members.\n        </Text>\n        <MonacoBox value={snippets.structural_typing} />\n      </Slide>\n      <Slide>\n        <Text>Declaration spaces</Text>\n        <Text>\n          <MonacoBox value={snippets.declaration_spaces} />\n        </Text>\n      </Slide>\n      <Slide>\n        <Text>Soundness and Completeness of the Type System</Text>\n        <MonacoBox value={snippets.soundness_and_completeness} />\n      </Slide>\n\n      <Slide>\n        <Text>Soundness and Completeness of the Type System</Text>\n        <UnorderedList>\n          <ListItem>\n            A type-system is sound implies that all of type-checked programs are\n            correct (in the other words, all of the incorrect program can't be\n            type checked), i.e. there won't be any false negative.\n          </ListItem>\n          <ListItem>\n            A type-system is complete implies that all of the correct program\n            can be accepted by the type checker, i.e. there won't be any false\n            positive\n          </ListItem>\n        </UnorderedList>\n      </Slide>\n      <Slide>\n        <Text>\n          Besides, according to Godel's incompleteness theorems, if your system\n          is expressive enough to represent natural numbers, then it can't be\n          both sound and complete.\n        </Text>\n\n        <Text>\n          Usually, most programming language would prefer soundness over\n          completeness, since false negative will result in bad consequence.\n        </Text>\n      </Slide>\n\n      <Slide>\n        <Heading>作业</Heading>\n\n        <Text>omit，Promise.all, SimpleVue</Text>\n      </Slide>\n    </Deck>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}